plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id "androidx.navigation.safeargs"
    id 'com.squareup.wire'
}

android {
    compileSdkVersion versions.compileSdk
    ndkVersion versions.ndkVersion
    defaultConfig {
        applicationId "com.alisafdar.enocassessment"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        versionCode versions.versionCode
        versionName versions.versionName
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "com.alisafdar.enocassessment.AppTestRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation" : "$projectDir/schemas".toString()]
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments["dagger.hilt.disableModulesHaveInstallInCheck"] = "true"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        viewBinding true
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        main.java.srcDirs += "$buildDir/generated/source/wire"
//        androidTest.java.srcDirs += "src/test-common/java"
//        test.java.srcDirs += "src/test-common/java"
//        test.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.time.ExperimentalTime"]
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"]
    }
}

dependencies {
    // android supports
    implementation "com.google.android.material:material:$versions.materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintVersion"

    // architecture components
    implementation "androidx.fragment:fragment-ktx:$versions.fragmentVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$versions.lifecycleVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navigationVersion"
    testImplementation "androidx.arch.core:core-testing:$versions.archCompomentVersion"
    implementation "androidx.datastore:datastore-core:$versions.dataStoreVersion"


    //Room
    implementation "androidx.room:room-runtime:$versions.roomVersion"
    implementation "androidx.room:room-ktx:$versions.roomVersion"
    kapt "androidx.room:room-compiler:$versions.roomVersion"
    implementation "net.zetetic:android-database-sqlcipher:$versions.sqlCipherVersion"

    // hilt
    implementation "com.google.dagger:hilt-android:$versions.hiltCoreVersion"
    kapt "com.google.dagger:hilt-compiler:$versions.hiltCoreVersion"
    kapt "androidx.hilt:hilt-compiler:$versions.hiltVersion"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$versions.hiltViewModel"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$versions.hiltCoreVersion"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$versions.hiltCoreVersion"

    // network
    implementation "com.github.skydoves:sandwich:$versions.sandwichVersion"
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttpVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttpVersion"

    // gson
    implementation "com.squareup.retrofit2:converter-gson:$versions.gsonVersion"

    //Permission Manager
    implementation "com.github.grumpyshoe:android-module-permissionmanager:$versions.permissionManager"

    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutinesVersion"

    // glide
    implementation "com.github.bumptech.glide:glide:$versions.glideVersion"
    implementation "com.github.florent37:glidepalette:$versions.glidePaletteVersion"
    kapt "com.github.bumptech.glide:compiler:$versions.glideVersion"

    // debugging
    implementation "com.jakewharton.timber:timber:$versions.timberVersion"

    //Wire
    implementation "com.squareup.wire:wire-runtime:$versions.wireVersion"

    //Sdp, Ssp
    implementation "com.intuit.sdp:sdp-android:$versions.scalable"
    implementation "com.intuit.ssp:ssp-android:$versions.scalable"

    // unit test
    testImplementation "junit:junit:$versions.junitVersion"
    testImplementation "org.mockito:mockito-core:$versions.mockitoCore"
    testImplementation "android.arch.core:core-testing:$versions.coreTestingVersion"
    testImplementation "androidx.test:core:$versions.androidxTest"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidxTestJunit"
    androidTestImplementation "com.android.support.test:runner:$versions.androidTestRunner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espressoVersion"
    testImplementation "org.robolectric:robolectric:$versions.robolectricVersion"
    testImplementation "org.powermock:powermock-module-junit4:$versions.powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$versions.powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$versions.powerMockVersion"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutinesVersion'
}

wire {
    kotlin {
        android = true
    }
}

//apply from: "$rootDir/spotless.gradle"